import com.android.ddmlib.DdmPreferences
import dependencies.Dependencies
import dependencies.Versions

plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

DdmPreferences.setTimeOut(60000)

ant.condition(property: 'os', value: 'windows') {
    os(family: 'windows')
}
ant.condition(property: 'os', value: 'unix') {
    os(family: 'unix')
}

def secretsFile = file('secrets.properties')
def secrets = new Properties()
if (secretsFile.exists()) {
    secrets.load(new FileInputStream(secretsFile))
}
def googleMapsApiKey = secrets.getProperty('GOOGLE_MAPS_API_KEY', '')
def mapboxAccessToken = secrets.getProperty('MAPBOX_ACCESS_TOKEN', '')

android {
    namespace 'io.samagra.oce_sample'
    compileSdk Versions.android_compile_sdk

    defaultConfig {
        applicationId "com.example.odkshellapp"
        minSdk Versions.android_min_sdk
        targetSdk Versions.android_target_sdk
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            if (secrets.getProperty('RELEASE_STORE_FILE')) {
                signingConfig signingConfigs.release
            }
            minifyEnabled(true)
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            resValue("string", "GOOGLE_MAPS_API_KEY", googleMapsApiKey)
            resValue("string", "mapbox_access_token", mapboxAccessToken)
        }

        debug {
            debuggable(true)
            testCoverageEnabled((findProperty("enableJacoco") ?: "false").toBoolean())
            resValue("string", "GOOGLE_MAPS_API_KEY", googleMapsApiKey)
            resValue("string", "mapbox_access_token", mapboxAccessToken)
        }
    }

    // https://stackoverflow.com/a/27119543/152938
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            outputFileName = new File(outputFileName.replace(".apk", "-${defaultConfig.versionName}.apk"))
        }
    }
    testVariants.all { variant ->
        variant.outputs.all { output ->
            outputFileName = new File(outputFileName.replace(".apk", "-${defaultConfig.versionName}.apk"))
        }
    }

    packagingOptions {
        resources {
            // These library licenses will be referenced in-app
            excludes += ['META-INF/ASL-2.0.txt', 'META-INF/LGPL-3.0.txt']

            // Pick first occurrence of any files that cause conflicts
            pickFirsts += ['META-INF/DEPENDENCIES', 'META-INF/LICENSE', 'META-INF/LICENSE.txt', 'META-INF/NOTICE', 'META-INF/NOTICE.txt', 'META-INF/services/com.fasterxml.jackson.core.JsonFactory', 'META-INF/services/com.fasterxml.jackson.core.ObjectCodec', 'META-INF/services/javax.ws.rs.ext.MessageBodyReader', 'META-INF/services/javax.ws.rs.ext.MessageBodyWriter', 'draftv4/schema', 'draftv3/schema']
        }

        // To ensure that ODK Collect is installable on all devices, we don't use
        // abiFilters to exclude any ABIs; but to keep the APK slim, we include
        // the Mapbox native library only for 32-bit and 64-bit ARM devices and
        // omit it for all X86 devices.
        if (!project.hasProperty("x86Libs")) {
            exclude 'lib/x86/libmapbox-maps.so'
            exclude 'lib/x86/libmapbox-common.so'
            exclude 'lib/x86/libc++_shared.so'
            exclude 'lib/x86_64/libmapbox-maps.so'
            exclude 'lib/x86_64/libmapbox-common.so'
            exclude 'lib/x86_64/libc++_shared.so'
        }
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true

            all {
                minHeapSize = '512m'
                maxHeapSize = project.properties['test.heap.max']
            }
        }
    }


    sourceSets {
        androidTest {
            java.srcDirs += "src/commonTest/java"
        }
        test {
            java.srcDirs += "src/commonTest/java"
        }
    }
    lint {
        abortOnError true
        checkDependencies true
        checkGeneratedSources true
        htmlReport true
        lintConfig file("$rootDir/odk/collect/config/lint.xml")
        xmlReport true
    }
}

configurations.all {
    resolutionStrategy {
        cacheDynamicVersionsFor(0, 'seconds')
        cacheChangingModulesFor(0, 'seconds')

        force 'org.objenesis:objenesis:2.6'
    }

    transitive = true
}

dependencies {

    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    coreLibraryDesugaring Dependencies.desugar

    if (secrets.getProperty('MAPBOX_DOWNLOADS_TOKEN', '') != '') {
        implementation project(':odk:collect:mapbox')
    }

    implementation Dependencies.androidx_startup
    implementation Dependencies.androidx_core_ktx
    implementation Dependencies.androidx_browser
    implementation Dependencies.androidx_appcompat
    implementation Dependencies.androidx_work_runtime

    implementation Dependencies.androidx_cardview
    implementation Dependencies.androidx_exinterface
    implementation Dependencies.androidx_multidex
    implementation Dependencies.androidx_preference_ktx
    implementation Dependencies.androidx_fragment_ktx

    implementation Dependencies.android_material
    implementation Dependencies.android_flexbox

    implementation Dependencies.play_services_auth
    implementation Dependencies.play_services_maps
    implementation Dependencies.play_services_location

    implementation Dependencies.firebase_analytics
    implementation Dependencies.firebase_crashlytics
    implementation Dependencies.firebase_storage
    implementation Dependencies.firebase_config

    implementation Dependencies.guava

    implementation Dependencies.squareup_okhttp
    implementation Dependencies.squareup_okhttp_tls
    implementation Dependencies.burgstaller_okhttp_digest

    implementation Dependencies.persian_joda_time
    implementation Dependencies.myanmar_calendar
    implementation Dependencies.bikram_sambat
    implementation Dependencies.rarepebble_colorpicker
    implementation Dependencies.commons_io
    implementation (Dependencies.opencsv) {
        exclude group: 'commons-logging'
    }
    implementation(Dependencies.javarosa) {
        exclude group: 'commons-io'
        exclude group: 'joda-time'
        exclude group: 'org.slf4j'
        exclude group: 'org.hamcrest', module: 'hamcrest-all'
    }
    implementation(Dependencies.google_api_client_android) {
        exclude group: 'org.apache.httpcomponents'
        exclude group: 'com.google.guava'
    }
    implementation(Dependencies.google_api_services_drive) {
        exclude group: 'org.apache.httpcomponents'
        exclude group: 'com.google.guava'
    }
    implementation(Dependencies.google_api_services_sheets) {
        exclude group: 'org.apache.httpcomponents'
        exclude group: 'com.google.guava'
    }

    implementation Dependencies.timber
    implementation Dependencies.slf4j_api
    implementation Dependencies.slf4j_timber

    implementation Dependencies.zxing_android_embedded

    implementation Dependencies.danlew_android_joda

    // Android Architecture Components:
    implementation Dependencies.androidx_lifecycle_extensions
    implementation Dependencies.androidx_lifecycle_runtime_ktx
    implementation Dependencies.androidx_viewpager2
    implementation Dependencies.androidx_lifecycle_viewmodel_ktx

    // Dagger:
    implementation Dependencies.dagger
    annotationProcessor Dependencies.dagger_compiler

    // Needed for injection into Robolectric tests
    testAnnotationProcessor Dependencies.dagger_compiler

    // Dagger Android:
    implementation Dependencies.dagger_android
    annotationProcessor Dependencies.dagger_android_processor

    implementation Dependencies.armen101_audio_recorder_view

    implementation(Dependencies.mp4parser_muxer) {
        exclude group: 'org.hamcrest'
    }

    implementation Dependencies.splashscreen

    // Testing-only dependencies
    testImplementation Dependencies.junit
    testImplementation Dependencies.mockito_core
    testImplementation Dependencies.mockito_inline
    testImplementation Dependencies.mockito_kotlin

    testImplementation Dependencies.robolectric

    testImplementation Dependencies.androidx_test_ext_junit
    testImplementation Dependencies.androidx_arch_core_testing
    testImplementation Dependencies.robolectric_shadows_multidex
    testImplementation Dependencies.okhttp3_mockwebserver
    testImplementation Dependencies.squareup_okhttp_tls

    testImplementation Dependencies.hamcrest

    testImplementation Dependencies.androidx_test_espresso_core
    testImplementation Dependencies.androidx_test_espresso_intents
    testImplementation Dependencies.androidx_test_core_ktx

    // Used to generate documentation screenshots.
    androidTestImplementation Dependencies.fastlane_screengrab
    androidTestImplementation Dependencies.mockito_android
    androidTestImplementation Dependencies.androidx_test_ext_junit
    androidTestImplementation Dependencies.androidx_test_espresso_core
    androidTestImplementation Dependencies.androidx_arch_core_testing
    androidTestImplementation Dependencies.androidx_test_espresso_contrib
    androidTestImplementation(Dependencies.androidx_test_espresso_intents) {
        exclude group: 'com.android.support', module: 'support-annotations'
    }

    androidTestImplementation Dependencies.okhttp3_mockwebserver
    androidTestImplementation Dependencies.androidx_work_testing
    androidTestImplementation Dependencies.uiautomator
    implementation project(':odk:extension')
    implementation "io.reactivex.rxjava3:rxjava:3.1.5"
    implementation "io.reactivex.rxjava3:rxandroid:3.0.0"

    // Real LeakCanary for debug builds only: notifications, analysis, etc
//    debugImplementation Dependencies.leakcanary
}

apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'